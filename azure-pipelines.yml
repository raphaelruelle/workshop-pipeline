# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


name: 'Build_$(SourceBranchName)'

variables:
  - name: 'System.debug'
    value: 'true'
  - name: 'AGENT_IMAGE'
    value: 'ubuntu-latest'

parameters:
  - name: RUN_BUILDING_APPLICATION
    displayName: Run Building Backend / Frontend Application
    type: "string"
    default: "all"
    values:
    - "all"
    - "backend"
    - "frontend"
       

trigger:
  - master
  
stages :
  - stage: Build
    displayName: Build Application
    jobs:
      - job: Backend
        displayName: Build Backend Application
        condition: ne('${{ parameters.RUN_BUILDING_APPLICATION }}', 'frontend')
        pool:
          vmImage: '$(AGENT_IMAGE)'
        variables:
          MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
          MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
        steps:
          - task: CacheBeta@1
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: |
                maven | "$(Agent.OS)"
                maven
              path: $(MAVEN_CACHE_FOLDER)
            displayName: Cache Maven local repo

          - task: Maven@3
            inputs:
              mavenPomFile: './backend/pom.xml'
              javaHomeOption: 'JDKVersion'
              jdkVersionOption: '1.8'
              jdkArchitectureOption: 'x64'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              goals: 'clean package $(MAVEN_OPTS)'
              codeCoverageToolOption: JaCoCo
              codeCoverageSourceDirectories: +:com.workshop.*
      
      - job: Frontend
        displayName: Build Frontend Application
        condition: ne('${{ parameters.RUN_BUILDING_APPLICATION }}', 'backend')
        pool:
          vmImage: '$(AGENT_IMAGE)'
        steps:
          - task: NodeTool@0 
          - script: npm install -d --prefix ./frontend
          - script: npm run tests --prefix ./frontend
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testRunner: JUnit
              testResultsFiles: '**/TEST-RESULTS.xml'